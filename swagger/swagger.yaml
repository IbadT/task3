components:
  schemas:
    Users:
      type: object
      required:
        - id
        - name
        - age
        - isMan
      parameters:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
        isMan:
          type: boolean
      example:
        id: 0
        name: Pasha
        age: 23
        isMan: true
    Mess:
      type: object
      required:
        - id
        - messages
      parameters:
        id:
          type: integer
        messages:
          type: string
      example:
        id: 0
        message: "Example text message"
    People:
      type: object
      parameters:
        id:
          type: integer
        nickname:
          type: string
        email:
          type: string
        password:
          type: string
        key: 
          type: string
      required:
        - nickname
        - email
        - password
      example:
        id: 0
        nickname: "SadBoy"
        email: "ibadtoff@gmail.com"
        password: "qwerty"
      

tags:
  name: Users
  description: API about Users
/api/users/getUsers:
  get:
    summary: Get all users
    tags: [Users]
    responses:
      200:
        description: Seccess
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Users"
/api/users/getUser/{id}:
  get:
    summary: Get user by id
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: Seccess
      400:
        description: id is invalid
/api/users/getGender/{gender}:
  get:
    summary: Get user to gender
    tags: [Users]
    parameters:
      - in: path
        name: gender
        schema:
          type: string
        required: true
    responses:
      200:
        description: Seccess
      400:
        description: parameters is on valid
/api/users/createUser:
  post:
    summary: Create User
    tags: [Users]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Users"
    responses:
      200:
        description: Seccess
      500:
        description: Internal Server Error
/api/users/edit/{id}:
  put:
    summary: Edit user by id
    tags: [Users]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Users"
    responses:
      200:
        description: Seccess
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Users"
      400:
        description: id is not valid
/api/users/editUser/{id}:
  patch:
    summary: Edit user name
    tags: [Users]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              name:
                type: string
    responses:
      200:
        description: Seccess
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Users"
      400:
        description: Bad request
/api/users/delete/{id}:
  delete:
    summary: Remove user by id
    tags: [Users]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    responses:
      200:
        description: true
      404:
        description: false
/api/messages/:
  get:
    summary: Get all messages
    tags: [Messages]
    responses:
      200:
        description: Seccess
      500:
        description: Internal Server Error
/api/messages/getByQuery:
  get:
    summary: Get message which includes query string
    tags: [Messages]
    parameters:
      - in: query
        name: string
        required: true
        schema:
          type: string
    responses:
      200:
        description: Seccess
        content:
          application/json:
            schema:
              type: array
              $ref: "#/components/schemas/Mess"
      400:
        description: Bad request --> query string is invalid
/api/messages/create:
  post:
    summary: Create message
    tags: [Messages]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/Mess"
    responses:
      200:
        description: Seccess
      400:
        description: Bad Request
/api/messages/edit/{id}:
  put:
    summary: Edit message by id
    tags: [Messages]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Mess"
    responses:
      200:
        description: Seccess
      400:
        description: Bad Request
/api/messages/editMess/{id}:
  patch:
    summary: Edit message by id
    tags: [Messages]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            parameters:
              message:
                type: string
    responses:
      200:
        description: Seccess
      400:
        description: Bad Reques
/api/messages/delete/{id}:
  delete:
    summary: Delete message by id
    tags: [Messages]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    responses:
      200:
        description: true
      404: 
        description: false
/api/people/:
  get:
    summary: Get all people
    tags: [People]
    responses:
      200: 
        description: Seccess
      500:
        description: Internal Server Error
/api/people/createPeople:
  post:
    summary: Create people
    tags: [People]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/People"
    responses:
      200:
        description: Seccess
      400: 
        description: Bad Request
/api/people/replacePeople/{id}:
  put:
    summary: Replace people by id
    tags: [People]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/People"
    responses:
      200:
        description: Seccess
      400: 
        description: Bad Request
/api/people/editPeople/{id}:
  patch:
    summary: Edit people by id
    tags: [People]
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            $ref: "#/components/schemas/People"
    responses:
      200:
        description: Seccess
      400:
        description: Bad Request
/api/people/delete/{id}:
  delete:
    summary: Delete people by id
    tags: [People]
    parameters: 
      - in: path
        required: true
        name: id
        schema:
          type: integer
    responses:
      200:
        description: true
      404:
        description: false